# -*- coding: utf-8 -*-
"""outlier_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ooX1HN8p2c8ri9cm8-oLuedxhT_PNjnU
"""

import pandas as pd
import numpy as np
from scipy import stats
from sklearn.ensemble import IsolationForest

def detect_and_handle_outliers(method='iqr', handling='median', save_path='outlier_free_dataset.csv'):
    """
    Detects and handles outliers in a dataset.

    Parameters:
    - method (str): Method to detect outliers ('iqr', 'zscore', 'isolation_forest').
    - handling (str): How to handle outliers ('remove', 'mean', 'median').
    - save_path (str): Path to save the cleaned dataset.

    Returns:
    - Saves an outlier-free CSV file.
    """
    # Get file path from user
    file_path = input("Enter the path to the CSV file: ")

    # Load dataset
    df = pd.read_csv(file_path)
    numeric_cols = df.select_dtypes(include=[np.number]).columns  # Selecting only numeric columns

    for col in numeric_cols:
        if method == 'iqr':
            # IQR method
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            outliers = (df[col] < lower_bound) | (df[col] > upper_bound)

        elif method == 'zscore':
            # Z-score method
            z_scores = np.abs(stats.zscore(df[col]))
            outliers = z_scores > 3

        elif method == 'isolation_forest':
            # Isolation Forest method
            iso_forest = IsolationForest(contamination=0.05, random_state=42)
            outlier_labels = iso_forest.fit_predict(df[[col]])
            outliers = outlier_labels == -1

        else:
            raise ValueError("Invalid method. Choose 'iqr', 'zscore', or 'isolation_forest'.")

        # Handling outliers
        if handling == 'remove':
            df = df[~outliers]
        elif handling == 'mean':
            df.loc[outliers, col] = df[col].mean()
        elif handling == 'median':
            df.loc[outliers, col] = df[col].median()
        else:
            raise ValueError("Invalid handling method. Choose 'remove', 'mean', or 'median'.")

    # Save cleaned dataset
    df.to_csv(save_path, index=False)
    print(f"Outlier-free dataset saved to {save_path}")

detect_and_handle_outliers(method='zscore', handling='mean', save_path='cleaned_data.csv')